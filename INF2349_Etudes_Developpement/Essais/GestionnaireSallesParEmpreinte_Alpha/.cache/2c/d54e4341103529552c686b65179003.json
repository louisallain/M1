{"id":"node_modules/@react-navigation/stack/lib/module/utils/conditional.js","dependencies":[{"name":"C:\\Users\\Power Media\\Desktop\\M1\\INF2349_Etudes_Developpement\\GestionnaireSallesParEmpreinte_Alpha\\node_modules\\@react-navigation\\stack\\lib\\module\\utils\\conditional.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Power Media\\Desktop\\M1\\INF2349_Etudes_Developpement\\GestionnaireSallesParEmpreinte_Alpha\\package.json","includedInParent":true,"mtime":1600885608164},{"name":"C:\\Users\\Power Media\\Desktop\\M1\\INF2349_Etudes_Developpement\\GestionnaireSallesParEmpreinte_Alpha\\node_modules\\@react-navigation\\stack\\package.json","includedInParent":true,"mtime":1600883548258},{"name":"react-native","loc":{"line":1,"column":25},"parent":"C:\\Users\\Power Media\\Desktop\\M1\\INF2349_Etudes_Developpement\\GestionnaireSallesParEmpreinte_Alpha\\node_modules\\@react-navigation\\stack\\lib\\module\\utils\\conditional.js","resolved":"C:\\Users\\Power Media\\Desktop\\M1\\INF2349_Etudes_Developpement\\GestionnaireSallesParEmpreinte_Alpha\\node_modules\\react-native-web\\dist\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = conditional;\n\nvar _reactNative = require(\"react-native\");\n\nconst {\n  add,\n  multiply\n} = _reactNative.Animated;\n/**\n * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n *\n * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n * @param main Animated Node to use if the condition is `true`\n * @param fallback Animated Node to use if the condition is `false`\n */\n\nfunction conditional(condition, main, fallback) {\n  // To implement this behavior, we multiply the main node with the condition.\n  // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n  // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n  // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n  // This way, one of them will always be 0, and other one will be the value we need.\n  // In the end we add them both together, 0 + value we need = value we need\n  return add(multiply(condition, main), multiply(condition.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 0]\n  }), fallback));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"conditional.tsx","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":3,"column":6},"generated":{"line":10,"column":6}},{"source":"conditional.tsx","name":"add","original":{"line":3,"column":8},"generated":{"line":11,"column":0}},{"source":"conditional.tsx","name":"add","original":{"line":3,"column":8},"generated":{"line":11,"column":2}},{"source":"conditional.tsx","name":null,"original":{"line":3,"column":6},"generated":{"line":11,"column":5}},{"source":"conditional.tsx","name":"multiply","original":{"line":3,"column":13},"generated":{"line":12,"column":0}},{"source":"conditional.tsx","name":"multiply","original":{"line":3,"column":13},"generated":{"line":12,"column":2}},{"source":"conditional.tsx","name":null,"original":{"line":3,"column":6},"generated":{"line":13,"column":0}},{"source":"conditional.tsx","name":"Animated","original":{"line":3,"column":26},"generated":{"line":13,"column":4}},{"source":"conditional.tsx","name":null,"original":{"line":3,"column":0},"generated":{"line":13,"column":25}},{"source":"conditional.tsx","name":null,"original":{"line":5,"column":0},"generated":{"line":14,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":12,"column":15},"generated":{"line":22,"column":0}},{"source":"conditional.tsx","name":"conditional","original":{"line":12,"column":24},"generated":{"line":22,"column":9}},{"source":"conditional.tsx","name":null,"original":{"line":12,"column":15},"generated":{"line":22,"column":20}},{"source":"conditional.tsx","name":"condition","original":{"line":13,"column":2},"generated":{"line":22,"column":21}},{"source":"conditional.tsx","name":null,"original":{"line":12,"column":15},"generated":{"line":22,"column":30}},{"source":"conditional.tsx","name":"main","original":{"line":14,"column":2},"generated":{"line":22,"column":32}},{"source":"conditional.tsx","name":null,"original":{"line":12,"column":15},"generated":{"line":22,"column":36}},{"source":"conditional.tsx","name":"fallback","original":{"line":15,"column":2},"generated":{"line":22,"column":38}},{"source":"conditional.tsx","name":null,"original":{"line":12,"column":15},"generated":{"line":22,"column":46}},{"source":"conditional.tsx","name":null,"original":{"line":16,"column":2},"generated":{"line":22,"column":48}},{"source":"conditional.tsx","name":null,"original":{"line":17,"column":2},"generated":{"line":23,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":18,"column":2},"generated":{"line":24,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":19,"column":2},"generated":{"line":25,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":20,"column":2},"generated":{"line":26,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":21,"column":2},"generated":{"line":27,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":22,"column":2},"generated":{"line":28,"column":0}},{"source":"conditional.tsx","name":null,"original":{"line":23,"column":2},"generated":{"line":29,"column":0}},{"source":"conditional.tsx","name":"add","original":{"line":23,"column":9},"generated":{"line":29,"column":9}},{"source":"conditional.tsx","name":null,"original":{"line":23,"column":12},"generated":{"line":29,"column":12}},{"source":"conditional.tsx","name":"multiply","original":{"line":24,"column":4},"generated":{"line":29,"column":13}},{"source":"conditional.tsx","name":null,"original":{"line":24,"column":12},"generated":{"line":29,"column":21}},{"source":"conditional.tsx","name":"condition","original":{"line":24,"column":13},"generated":{"line":29,"column":22}},{"source":"conditional.tsx","name":null,"original":{"line":24,"column":12},"generated":{"line":29,"column":31}},{"source":"conditional.tsx","name":"main","original":{"line":24,"column":24},"generated":{"line":29,"column":33}},{"source":"conditional.tsx","name":null,"original":{"line":24,"column":12},"generated":{"line":29,"column":37}},{"source":"conditional.tsx","name":null,"original":{"line":23,"column":12},"generated":{"line":29,"column":38}},{"source":"conditional.tsx","name":"multiply","original":{"line":25,"column":4},"generated":{"line":29,"column":40}},{"source":"conditional.tsx","name":null,"original":{"line":25,"column":12},"generated":{"line":29,"column":48}},{"source":"conditional.tsx","name":"condition","original":{"line":26,"column":6},"generated":{"line":29,"column":49}},{"source":"conditional.tsx","name":null,"original":{"line":26,"column":15},"generated":{"line":29,"column":58}},{"source":"conditional.tsx","name":"interpolate","original":{"line":26,"column":16},"generated":{"line":29,"column":59}},{"source":"conditional.tsx","name":"condition","original":{"line":26,"column":6},"generated":{"line":29,"column":70}},{"source":"conditional.tsx","name":null,"original":{"line":26,"column":28},"generated":{"line":29,"column":71}},{"source":"conditional.tsx","name":"inputRange","original":{"line":27,"column":8},"generated":{"line":30,"column":0}},{"source":"conditional.tsx","name":"inputRange","original":{"line":27,"column":8},"generated":{"line":30,"column":4}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":18},"generated":{"line":30,"column":14}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":20},"generated":{"line":30,"column":16}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":21},"generated":{"line":30,"column":17}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":20},"generated":{"line":30,"column":18}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":24},"generated":{"line":30,"column":20}},{"source":"conditional.tsx","name":null,"original":{"line":27,"column":20},"generated":{"line":30,"column":21}},{"source":"conditional.tsx","name":null,"original":{"line":26,"column":28},"generated":{"line":30,"column":22}},{"source":"conditional.tsx","name":"outputRange","original":{"line":28,"column":8},"generated":{"line":31,"column":0}},{"source":"conditional.tsx","name":"outputRange","original":{"line":28,"column":8},"generated":{"line":31,"column":4}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":19},"generated":{"line":31,"column":15}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":21},"generated":{"line":31,"column":17}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":22},"generated":{"line":31,"column":18}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":21},"generated":{"line":31,"column":19}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":25},"generated":{"line":31,"column":21}},{"source":"conditional.tsx","name":null,"original":{"line":28,"column":21},"generated":{"line":31,"column":22}},{"source":"conditional.tsx","name":null,"original":{"line":26,"column":28},"generated":{"line":32,"column":0}},{"source":"conditional.tsx","name":"condition","original":{"line":26,"column":6},"generated":{"line":32,"column":3}},{"source":"conditional.tsx","name":null,"original":{"line":25,"column":12},"generated":{"line":32,"column":4}},{"source":"conditional.tsx","name":"fallback","original":{"line":30,"column":6},"generated":{"line":32,"column":6}},{"source":"conditional.tsx","name":null,"original":{"line":25,"column":12},"generated":{"line":32,"column":14}},{"source":"conditional.tsx","name":null,"original":{"line":23,"column":12},"generated":{"line":32,"column":15}},{"source":"conditional.tsx","name":null,"original":{"line":23,"column":2},"generated":{"line":32,"column":16}},{"source":"conditional.tsx","name":null,"original":{"line":33,"column":1},"generated":{"line":33,"column":0}}],"sources":{"conditional.tsx":"import { Animated } from 'react-native';\n\nconst { add, multiply } = Animated;\n\n/**\n * Use an Animated Node based on a condition. Similar to Reanimated's `cond`.\n *\n * @param condition Animated Node representing the condition, must be 0 or 1, 1 means `true`, 0 means `false`\n * @param main Animated Node to use if the condition is `true`\n * @param fallback Animated Node to use if the condition is `false`\n */\nexport default function conditional(\n  condition: Animated.AnimatedInterpolation,\n  main: Animated.AnimatedInterpolation,\n  fallback: Animated.AnimatedInterpolation\n) {\n  // To implement this behavior, we multiply the main node with the condition.\n  // So if condition is 0, result will be 0, and if condition is 1, result will be main node.\n  // Then we multiple reverse of the condition (0 if condition is 1) with the fallback.\n  // So if condition is 0, result will be fallback node, and if condition is 1, result will be 0,\n  // This way, one of them will always be 0, and other one will be the value we need.\n  // In the end we add them both together, 0 + value we need = value we need\n  return add(\n    multiply(condition, main),\n    multiply(\n      condition.interpolate({\n        inputRange: [0, 1],\n        outputRange: [1, 0],\n      }),\n      fallback\n    )\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"2dbe0916f6fb0ade256816c6d66a0869","cacheData":{"env":{}}}